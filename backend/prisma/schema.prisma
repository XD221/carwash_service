datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    
}

generator client {
  provider = "prisma-client-js"
}

model Persona {
  id        Int     @id  @default(autoincrement())
  nombre     String  @db.VarChar(35)
  apellido   String? @db.VarChar(40)
  telefono String
  ci String @db.VarChar(15)
  correo String? @db.VarChar(60)
  direccion String?  @db.VarChar(255)
  creado_en DateTime @default(now())
  actualizado_en DateTime @updatedAt
  propietarioId Int?
  propietario Usuario? @relation("propietario", fields: [propietarioId], references: [id])
  usuario Usuario? @relation("persona")
  ventas Ventas[]
  vehiculo Vehiculo[]
  @@unique([ci, propietarioId])
}

model Usuario {
  id    Int     @id @default(autoincrement())
  username String  @unique @db.VarChar(50)
  password  String
  role UserRole @default(INVERSIONISTA)
  estado Boolean @default(true) // true: Activo, false: Inactivo
  creado_en DateTime @default(now())
  actualizado_en DateTime @updatedAt
  personaId Int @unique
  sucursalId Int? // Solo operadores que pertenecen a la sucursal
  local Sucursal? @relation("local",fields: [sucursalId], references: [id])
  sucursal Sucursal[] @relation("sucursal")
  persona Persona @relation("persona", fields: [personaId], references: [id])
  propietario Persona[] @relation("propietario")
  servicio Servicio[]
  ventas Ventas[] @relation("encargado")
  producto Producto[]
  tarifaTipoVehiculo tarifaTipoVehiculo[]
}

model Servicio {
    id Int @id @default(autoincrement())
    nombre String @db.VarChar(60)
    precio Decimal @db.Decimal(11,2)
    descripcion String @db.VarChar(255)
    propietarioId Int
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    propietario Usuario @relation(fields: [propietarioId], references: [id])
    consumoServicio ConsumoServicio[]
    sucursalServicio SucursalServicio[]
}

model Sucursal {
    id Int @id @default(autoincrement())
    nombre String @db.VarChar(80)
    direccion String @db.VarChar(255)
    estado Boolean @default(true) // true: Activo, false: Inactivo
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    empleados Usuario[] @relation("local")
    propietarioId Int
    propietario Usuario @relation("sucursal",fields: [propietarioId], references: [id])
    ventas Ventas[]
    inventario Inventario[]
    sucursalServicio SucursalServicio[]
}

model SucursalServicio {
    estado Boolean @default(true) // true: Activo, false: Inactivo
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    servicioId Int 
    sucursalId Int
    servicio Servicio @relation(fields: [servicioId], references: [id])
    sucursal Sucursal @relation(fields: [sucursalId], references: [id])
    @@id([servicioId, sucursalId])
}

model Producto {
    id Int @id @default(autoincrement())
    nombre String @db.VarChar(35)
    precio Decimal @db.Decimal(11,2)
    url_imagen String @default("")
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    propietarioId Int
    propietario Usuario? @relation(fields: [propietarioId], references: [id])
    consumoProducto ConsumoProducto[]
    inventario Inventario?
}

model Inventario {
    id Int @id @default(autoincrement())
    cantidad Int
    estado Boolean @default(true) // true: Activo, false: Inactivo
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    productoId Int @unique
    sucursalId Int
    producto Producto @relation(fields: [productoId], references: [id])
    sucursal Sucursal @relation(fields: [sucursalId], references: [id])
    @@unique([productoId, sucursalId])
}

model Ventas { // EL propietario se consigue en la relacion con la sucursal
    id Int @id @default(autoincrement())
    detalle String @db.VarChar(500)
    total Decimal @db.Decimal(9,2)
    estado Int @db.TinyInt() @default(0) // 0: Pendiente, 1: En proceso 3: Terminada 4: Cancelada 5: Anulada
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    personaId Int
    sucursalId Int
    servicioId Int
    encargadoId Int
    persona Persona @relation(fields: [personaId], references: [id])
    sucursal Sucursal @relation(fields: [sucursalId], references: [id])
    encargado Usuario @relation("encargado", fields: [encargadoId], references: [id])
    consumoProducto ConsumoProducto[]
    consumoServicio ConsumoServicio[]
    vehiculoMantenimiento VehiculoMantenimiento[]
}

model VehiculoMantenimiento {
    id Int @id @default(autoincrement())
    detalle String @db.VarChar(500)
    tarifa Decimal @db.Decimal(11,2)
    estado Int @db.TinyInt() @default(0) // 0: Pendiente, 1: En proceso, 2: Finalizado
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    vehiculoId Int
    ventaId Int
    vehiculo Vehiculo @relation(fields: [vehiculoId], references: [id])
    venta Ventas @relation(fields: [ventaId], references: [id])
    @@unique([vehiculoId, ventaId])
}

model ConsumoServicio {
    detalle String @db.VarChar(500)
    precio Decimal @db.Decimal(11,2)
    estado Int @db.TinyInt() @default(0) // 0: Pendiente, 1: En proceso, 2: Finalizado
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    servicioId Int
    ventaId Int
    servicio Servicio @relation(fields: [servicioId], references: [id])
    venta Ventas @relation(fields: [ventaId], references: [id])
    @@id([servicioId, ventaId])

}

model ConsumoProducto {
    cantidad Int
    subtotal Decimal @db.Decimal(9,2)
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    productoId Int
    ventaId Int
    producto Producto @relation(fields: [productoId], references: [id])
    venta Ventas @relation(fields: [ventaId], references: [id])
    @@id([productoId, ventaId])
}

model Vehiculo {
    id Int @id @default(autoincrement())
    placa String @db.VarChar(60)
    marca String @db.VarChar(60)
    modelo String @db.VarChar(60)
    color String @db.VarChar(20)
    anio String @db.VarChar(4)
    creado_en DateTime @default(now())
    actualizado_en DateTime @updatedAt
    tipoVehiculo TipoVehiculo @default(AUTO)
    personaId Int
    persona Persona @relation(fields: [personaId], references: [id])
    vehiculoMantenimiento VehiculoMantenimiento[]
}

model tarifaTipoVehiculo {
    id Int @id @default(autoincrement())
    tarifa Decimal @db.Decimal(9,2)
    estado Boolean @default(true) // true: Activo, false: Inactivo
    creado_en DateTime @default(now())
    tipoVehiculo TipoVehiculo @default(AUTO)
    propietarioId Int
    propietario Usuario? @relation(fields: [propietarioId], references: [id])
}

enum UserRole {
    INVERSIONISTA
    OPERADOR
    ADMIN
}

enum TipoVehiculo {
    MOTO
    AUTO
    CAMIONETA
    VAGONETA
    CAMION
    BUS
    TRACTOR
    OTRO
}